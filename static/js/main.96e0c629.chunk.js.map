{"version":3,"sources":["components/home.js","App.js","index.js"],"names":["GiphyApiKey","myStyle","mainCard","borderRadius","marginTop","padding","noMargin","margin","noPadding","gifPost","textAlign","cursor","formBox","backgroundColor","submitButton","width","search","position","inputInput","paddingLeft","iconButton","marginLeft","marginRight","iconButtonHover","removeGifButton","normalChip","selectChip","postText","SmallIconButton","props","useState","Hovered","setHovered","IconButton","style","onClick","onMouseEnter","onMouseLeave","icon","Home","handleGifQueryChange","e","setState","gifQuery","target","value","gifs","hasMore","fetchMoreGifs","handleClose","open","addPost","posts","text","state","currentText","gif","currentGif","hasMoreGifs","console","log","controller","abort","AbortController","searchUrl","length","fetch","method","signal","then","response","json","data","forEach","small","original","pagination","total_count","catch","err","error","isGifPage","this","gifsList","map","index","s","src","alt","className","maxWidth","Dialog","onClose","left","top","InputBase","onChange","autoFocus","placeholder","DialogContent","dataLength","next","loader","active","color","flashing","size","height","endMessage","right","id","display","Chip","label","clickable","DialogActions","disabled","post","Component","App","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.96e0c629.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\r\nimport { Navbar, Row, Col, Card, Button, Textarea, Preloader} from 'react-materialize';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport './home.css';\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n\r\nconst GiphyApiKey = \"EQh0DeRaL6DoipBy8vrLyDzp1hF7f2ej\"\r\n\r\nconst myStyle = {\r\n    mainCard:{\r\n        borderRadius:\"8px\",\r\n        marginTop:\"25px\",\r\n        padding:\"0\",\r\n    },\r\n    noMargin:{\r\n        margin:\"0\"\r\n    },\r\n    noPadding:{\r\n        padding:\"0\"\r\n    },\r\n    gifPost:{\r\n        textAlign:\"center\",\r\n        padding:\"10px 0px 0px 0px\",\r\n        cursor:\"pointer\",\r\n    },\r\n    formBox:{\r\n        padding:\"10px 15px\",\r\n        backgroundColor:\"#F0F2F5\", \r\n        borderRadius:\"50px\", \r\n        cursor:\"pointer\"\r\n    },\r\n    submitButton:{\r\n        width:\"100%\", \r\n        borderRadius:\"8px\", \r\n        backgroundColor:\"#1771E6\"\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: \"50px\",\r\n        backgroundColor: \"rgba(200,200,200, 0.15)\",\r\n        margin: \"15px 24px 15px 24px\",\r\n        padding:\"5px\",        \r\n    },\r\n    inputInput: {\r\n        padding: \"2px\",\r\n        paddingLeft:\"15px\",\r\n        width: '100%',\r\n    },\r\n    iconButton:{\r\n        backgroundColor:\"rgba(200,200,200, 0.15)\", \r\n        marginLeft:\"24px\", \r\n        marginRight:\"24px\", \r\n        marginTop:\"15px\",\r\n        padding:\"5px\",\r\n    },\r\n    iconButtonHover:{\r\n        backgroundColor: \"rgba(200,200,200, 1)\",\r\n        marginLeft:\"24px\", \r\n        marginRight:\"24px\", \r\n        marginTop:\"15px\",\r\n        padding:\"5px\",\r\n    },\r\n    removeGifButton:{\r\n        backgroundColor:\"rgba(255,255,255, 0.95)\", \r\n        marginLeft:\"24px\",\r\n        marginRight:\"24px\", \r\n        marginTop:\"15px\",\r\n        padding:\"5px\",\r\n    },\r\n    normalChip:{\r\n\r\n    },\r\n    selectChip:{\r\n\r\n    },\r\n    postText:{\r\n        padding:\"5px 24px 5px 24px\"\r\n    }\r\n    \r\n}\r\n\r\nconst SmallIconButton = (props) => {\r\n    const [Hovered, setHovered] = useState(false);\r\n    return(\r\n        <IconButton \r\n            style={Hovered?myStyle.iconButtonHover:myStyle.iconButton} \r\n            onClick={props.onClick}\r\n            onMouseEnter={() => setHovered(true)}\r\n            onMouseLeave={() => setHovered(false)}\r\n        >\r\n            {props.icon}\r\n        </IconButton>\r\n    )\r\n}\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            open:false,\r\n            isGifPage:false,\r\n            currentText:\"\",\r\n            currentGif:\"\",\r\n            gifQuery:\"\",\r\n            hasMoreGifs:true,\r\n            gifs:[],\r\n            posts:[\r\n                {\r\n                    \"text\":\"This is default post\",\r\n                    \"gif\":\"\"\r\n                },\r\n            ]\r\n        }\r\n        this.controller = null\r\n    }\r\n    componentDidMount(){\r\n        this.fetchMoreGifs()\r\n    }\r\n    handleGifQueryChange = (e) => {\r\n        this.setState({gifQuery:e.target.value, gifs:[], hasMore:true}, ()=>this.fetchMoreGifs())\r\n    }\r\n    handleClose = () => {\r\n        this.setState({open:false})\r\n    }\r\n    addPost = () => {\r\n        this.setState({posts:[{text:this.state.currentText,gif:this.state.currentGif}, ...this.state.posts], currentText:\"\", currentGif:\"\", open:false, gifs:[], hasMoreGifs:true})\r\n    }\r\n    fetchMoreGifs = () => {\r\n        console.log('here')\r\n        if (this.controller){\r\n            this.controller.abort()\r\n        }\r\n        \r\n        this.controller = new AbortController()\r\n        let searchUrl = `https://api.giphy.com/v1/gifs/search?api_key=${GiphyApiKey}&limit=12&rating=g&q=${this.state.gifQuery}&offset=${this.state.gifs.length}`\r\n        if (this.state.gifQuery === \"\"){\r\n            searchUrl = `https://api.giphy.com/v1/gifs/trending?api_key=${GiphyApiKey}&limit=12&rating=g&offset=${this.state.gifs.length}`\r\n        }\r\n        console.log(searchUrl)\r\n        fetch(searchUrl,{method:\"get\", signal:this.controller.signal})\r\n        .then(response => response.json())\r\n        .then(data => \r\n            {\r\n                let gifs = this.state.gifs\r\n                data.data.forEach(gif => {\r\n                    gifs = [...gifs, {small:gif[\"images\"][\"downsized_medium\"][\"url\"],original:gif[\"images\"][\"downsized_medium\"][\"url\"]}]\r\n                });\r\n                let hasMoreGifs = false\r\n                if(data.pagination.total_count >= gifs.length){\r\n                    hasMoreGifs = true\r\n                }\r\n                this.setState({gifs:gifs, hasMoreGifs:hasMoreGifs})\r\n            })\r\n        .catch(function(err) {\r\n            console.error(` Err: ${err}`);\r\n        });\r\n    }\r\n    render() {\r\n        console.log(this.state)\r\n        // let gifsList = null\r\n        // if(this.state.gifsLoading){\r\n        //     gifsList = \r\n            \r\n        // }\r\n        let gifsList = this.state.gifs.map((gif, index) => {\r\n            return(\r\n                <Col key={index} s={12}>\r\n                    <img style={{cursor:\"pointer\"}} width=\"100%\" src={gif.small} alt={\"Gif\"} onClick={() => this.setState({currentGif:gif.original, isGifPage:false})}></img>\r\n                </Col>\r\n            )\r\n        })\r\n        return (\r\n            <>\r\n                <Navbar style={{backgroundColor:\"#1771E6\"}} />\r\n                <div className=\"container\" style={{maxWidth:\"600px\"}}>\r\n                        <Card style={myStyle.mainCard}>\r\n                            <Row style={myStyle.noMargin}>\r\n                                <Col s={12} style={myStyle.noPadding}>\r\n                                    <div style={myStyle.formBox} onClick={() => this.setState({open:true, isGifPage:false})}>\r\n                                        What's on your mind?\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Dialog\r\n                            open={this.state.open}\r\n                            onClose={this.handleClose}\r\n                        >\r\n                            {this.state.isGifPage\r\n                            ?\r\n                            <>\r\n                                <div style={{position:\"absolute\", left:0, top:0}}>\r\n                                    <SmallIconButton key=\"gif-page\" onClick={() => this.setState({isGifPage:false})} icon={<ArrowBackIcon/>} />\r\n                                </div>\r\n                                <div style={{textAlign:\"center\"}}>\r\n                                    <h5>\r\n                                        Choose a GIF\r\n                                    </h5>\r\n                                    <div style={myStyle.search}>\r\n                                        <InputBase\r\n                                            value={this.state.gifQuery}\r\n                                            onChange={this.handleGifQueryChange}\r\n                                            autoFocus\r\n                                            placeholder=\"Search…\"\r\n                                            style={myStyle.inputInput}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <DialogContent>\r\n                                \r\n                                    <Row>\r\n                                        <InfiniteScroll\r\n                                            dataLength={this.state.gifs.length}\r\n                                            next={this.fetchMoreGifs}\r\n                                            hasMore={this.state.hasMoreGifs}\r\n                                            loader={<Col s={12} style={{textAlign:\"center\"}}>\r\n                                                        <Preloader\r\n                                                        active\r\n                                                        color=\"blue\"\r\n                                                        flashing={false}\r\n                                                        size=\"small\"\r\n                                                        />\r\n                                                    </Col>}\r\n                                            height={400}\r\n                                            endMessage={\r\n                                                <p style={{ textAlign: \"center\" }}>\r\n                                                <b>Yay! You have seen it all</b>\r\n                                                </p>\r\n                                            }\r\n                                            >\r\n                                                {gifsList}\r\n                                        </InfiniteScroll>\r\n                                    </Row>\r\n                                </DialogContent>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <div style={{position:\"absolute\",right:0, top:0}}>\r\n                                    <SmallIconButton key=\"text-page\" onClick={this.handleClose} icon={<CloseIcon />} />\r\n                                </div>\r\n                                <div style={{textAlign:\"center\"}}>\r\n                                    <h5>\r\n                                        Create Post\r\n                                    </h5>\r\n                                </div>\r\n                                \r\n                                <DialogContent>\r\n                                    <Textarea\r\n                                        autoFocus\r\n                                        id=\"post-input\"\r\n                                        placeholder=\"What's on your mind?\"\r\n                                        value={this.state.currentText}\r\n                                        onChange={(e) => {this.setState({currentText:e.target.value})}}\r\n                                    />\r\n                                    \r\n                                    {this.state.currentGif === \"\"?null:\r\n                                    <Row>\r\n                                        <Col s={12} style={{textAlign:\"center\", padding:\"0\"}}>\r\n                                        <div style={{display: \"inline-block\",position: \"relative\", width:\"100%\"}}>\r\n                                            <div style={{position:\"absolute\",right:0, top:0}}>\r\n                                                <IconButton \r\n                                                    style={myStyle.removeGifButton} \r\n                                                    onClick={() => this.setState({currentGif:\"\"})}\r\n                                                >\r\n                                                    <CloseIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                            <img style={{borderRadius:\"8px\"}} width=\"100%\" src={this.state.currentGif} alt={\"Gif\"}></img>\r\n                                        </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    }\r\n                                    \r\n                                    <Chip\r\n                                        icon={<GifIcon />}\r\n                                        label={\"GIF\"}\r\n                                        clickable\r\n                                        style={this.state.currentGif === \"\"?myStyle.normalChip:myStyle.selectChip}\r\n                                        onClick={() => {this.setState({isGifPage:true})}}\r\n                                    />\r\n                                </DialogContent>\r\n                                <DialogActions style={{padding:\"8px 24px 24px 24px\"}}>\r\n                                    <Button disabled={((this.state.currentText === \"\") && (this.state.currentGif === \"\") )?true:false} style={myStyle.submitButton} onClick={this.addPost}>\r\n                                        Post\r\n                                    </Button>\r\n                                </DialogActions>\r\n                            </>\r\n                            }\r\n                            \r\n                        </Dialog>\r\n                        {this.state.posts.map((post, index) => {\r\n                            return(\r\n                                <Card className=\"posts\" key={index} style={myStyle.mainCard}>\r\n                                    <Row style={myStyle.noMargin}>\r\n                                        {post.text === \"\"?null:\r\n                                            <Col s={12} style={myStyle.postText}>\r\n                                                {post.text}\r\n                                            </Col>\r\n                                        }\r\n                                        \r\n                                        {post.gif === \"\"? null \r\n                                        :\r\n                                            <Col s={12} style={myStyle.gifPost}>\r\n                                                <img style={{width:\"100%\"}} src={post.gif} alt={\"Gif\"}></img>\r\n                                            </Col>\r\n                                        }\r\n                                        \r\n                                    </Row>\r\n                                </Card>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport Home from './components/home';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Home />\n\t\t);\n\t}\n}\n\nexport default App;","import { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport ReactDOM from \"react-dom\";\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}